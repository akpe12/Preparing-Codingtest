Q. 다트 게임은 총 3번의 기회로 구성된다.
각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.
점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.
옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다.
스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)
스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)
스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)
Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.
스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.
0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

- 다른 사람의 풀이
import re

def solution(dartResult):
    bonus = {'S' : 1, 'D' : 2, 'T' : 3}
    option = {'' : 1, '*' : 2, '#' : -1}
    #정규 표현식으로서, ()은 한 그룹을 의미
    #\d는 모든 숫자를 매칭
    #+는 반복이 1번 이상되는 것으로 매칭
    #[]안에는 모든 문자열, 숫자 등이 들어갈 수 있는 그룹이고
    #그 안에 특정하여 SDT만 넣는다면, SDT(대문자)에 매칭하는 것을 원한다는 것
    #*#와 매칭하기를 원하는 것이며, ?는 0회 이상 1회 이하 반복되는 것들 중에서만 매칭한다는 말이다.
    #즉, 0회 이상 1회 반복되는 * or #이 있는지
    #[]문자 그룹 밖에 ?를 적어두면 매칭되지 않는 ''공백이 나와도 ''공백을 제거하지 않고 앞에서 매칭됐던 것들을 리스트에 내보내준다.
    
    #이렇게 p에 매칭하기를 원하는 정규 표현식을 compile해둔다.
    p = re.compile('(\d+)([SDT])([*#]?)')
    #dartResult와 컴파일한 정규 표현식을 비교했을 때, 매칭되는 부분들을 모두 리스트 형식으로 리턴한다.
    dart = p.findall(dartResult)
    for i in range(len(dart)):
        if dart[i][2] == '*' and i > 0:
            dart[i-1] *= 2
        dart[i] = int(dart[i][0]) ** bonus[dart[i][1]] * option[dart[i][2]]

    answer = sum(dart)
    return answer
    
- 나의 풀이(케이스 하나하나 따져서 만든 코드)
def solution(res3):
    idx = []
    ans = ""
    bonus = {"S" : "1", "D" : "2", "T" : "3"}

    res3 = list(res3)
    for i in range(len(res3)):
        if res3[i] == "*" and i != 2:
            idx.append(i - 2)

    for i in idx:
        res3.insert(i, "*")
    res3 = "".join(res3)
    print(res3)

    for i in range(len(res3)):
        if res3[i].isdigit():
            if i != 0:
                ans += "+"
            if res3[i] == "1" and res3[i + 1] == "0":
                ans += "pow(10," + bonus.get(res3[i+2]) + ")"   
            else: 
                ans += "pow(" + res3[i] + "," + bonus.get(res3[i+1]) + ")"
        elif res3[i] == "#":
            ans += "*(-1)"
        elif res3[i] == "*":
            ans += "*2"
    return eval(ans)
