Q. 각 자리가 숫자(0~9)로만 이뤄진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 숫자를 확인하며 숫자 사이에 "X" 혹은 "+" 연산자를 넣어
결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요.
계산은 연산자 우선순위와 상관없이 왼쪽부터 오른쪽으로 이뤄집니다.
문자열의 길이 => 1 <= len(S) <= 20

* 생각의 흐름 *
1. 0과 계산을 해야하는 경우만을 제외하고 모두 X사용
2. 0과 연산을 하게 되는 좌항 또는 우항 사이에 +연산자 사용
2-1. 0과 연산? a + 0 or 0 + a --> 0a923~ or 30910~
2-2. 0오른쪽에는 +가 올 필요가 없다, 0이 맨 앞에 나온 숫자가 아닌 이상은
deque? x
stack? if peek 0 => + a else * a or 들어오는 숫자가 0 => + else *
for? x

* 떠오른 아이디어 *
1. 0과 1을 만나면 더하기 연산을 해줘야 한다.
2. 그러나 0은 더하기 연산을 해도 값의 변화가 없다.
3. 따라서 0은 s에서 모두 지워도 무방하다.
4. 남은 건 1인데, 어차피 더하기 연산을 해줄 것이므로 나중에 해줘도 되지 않을까라는 생각.

* 아이디어의 결과 *
totally wrong idea
예를 들자면, (3 + 1) * 5 그리고 3 * 5 + 1
값이 각각 20과 16으로 다르므로 틀린 아이디어다.

* 위의 아이디어가 맞은 줄 알고 풀이를 봐버렸다.
⭕️ 풀이 분석

# 문자열 s를 입력받는다.
s = input()

# 좌항을 s의 첫 번째 인덱스의 원소로 설정하고
# 계산을 위해 그 원소의 타입을 변환해준다.
left = int(s[0])

# 변수 left에 0번째 원소값을 넣어놨으므로
# index 1부터 s의 길이까지의 수로 for문의 loop 횟수를 설정한다.
for num in range(1, len(s)):
    # 우항은 좌항에 더해줄 원소들을 찾는 역할로서
    # 1번째 인덱스부터 끝 인덱스에 있는 원소들을 갖게 된다.
    right = int(s[num])
    
    # 계산을 할 두 수 중에서 0 혹은 1을 가지고 있는 변수가 있다면
    if left <= 1 or right <= 1:
        # 더하기 연산을 한다.
        left += right
    # 계산을 할 두 수 중 어느 변수도 0 혹은 1을 가지고 있지 않다면
    else:
        # 가장 큰 값을 위해 항상 곱하기 연산을 한다.
        left *= right
    
print(left)
