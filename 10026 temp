#https://www.acmicpc.net/problem/10026
#적록색약이라 R과 G가 구분이 안 된다.
#정사각형 행렬
#첫째 줄 -> 색을 몇 줄 입력할 것인지 N을 입력받는다.
#둘째 줄 ~ -> N줄에 rgb값을 입력
#비적록색약인이 볼 때 구역의 개수, 적록색약인이 볼 때 구역의 개수 출력

import sys
from collections import deque
input = sys.stdin.readline

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

#행 개수와 그래프 정보 입력 받기
matrix = int(input().rstrip())
graph = []
visited = [[False] * matrix for _ in range(matrix)]
count = 0
blind_count = 0
for _ in range(matrix):
    graph.append(list(map(str, input().rstrip())))

def bfs(x, y, color):
    q = deque()
    q.append((x, y))
    while q:
        x, y = q.popleft()
        if visited[x][y] == False:
            visited[x][y] = True
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if nx >= 0 and nx < matrix and ny >= 0 and ny < matrix:
                    if graph[nx][ny] == color:
                        q.append((nx, ny))

#비색약
for i in range(matrix):
    for j in range(matrix):
        if visited[i][j] == False:
            color = graph[i][j]
            #색이 다를 때마다 빠져나와서
            #구역이 몇 개인지 체크가 가능한 것
            bfs(i, j, color)
            count += 1
#색약
for i in range(matrix):
    for j in range(matrix):
        if graph[i][j] == "G":
            graph[i][j] = "R"

visited = [[False] * matrix for _ in range(matrix)]
for i in range(matrix):
    for j in range(matrix):
        if visited[i][j] == False:
            color = graph[i][j]
            #색이 다를 때마다 빠져나와서
            #구역이 몇 개인지 체크가 가능한 것
            bfs(i, j, color)
            blind_count += 1
print(count, blind_count)


#시도해본 코드
import sys
import copy
input = sys.stdin.readline

#행 개수와 그래프 정보 입력 받기
matrix = int(input().rstrip())
graph = []
visited = [[False] * matrix for _ in range(matrix)]
red_count = 0
blue_count = 0
green_count = 0
for _ in range(matrix):
    graph.append(list(map(str, input().rstrip())))
#dfs for non_color_blind
def red(x, y):
    if x <= -1 or x >= matrix or y <= -1 or y >= matrix:
        return False
    if graph[x][y] == "R" and not visited[x][y]:
        visited[x][y] = True
        red(x + 1, y)
        red(x - 1, y)
        red(x, y - 1)
        red(x, y + 1)
        return True
    return False

def green(x, y):
    if x <= -1 or x >= matrix or y <= -1 or y >= matrix:
        return False
    if graph[x][y] == "G" and not visited[x][y]:
        visited[x][y] = True
        green(x + 1, y)
        green(x - 1, y)
        green(x, y - 1)
        green(x, y + 1)
        return True
    return False

def blue(x, y):
    if x <= -1 or x >= matrix or y <= -1 or y >= matrix:
        return False
    if graph[x][y] == "B" and not visited[x][y]:
        visited[x][y] = True
        blue(x + 1, y)
        blue(x - 1, y)
        blue(x, y - 1)
        blue(x, y + 1)
        return True
    return False
    
#출력 for non_color_blind
for i in range(matrix):
    for j in range(matrix):
        if red(i, j) == True:
            red_count += 1
        if blue(i, j) == True:
            blue_count += 1
        if green(i, j) == True:
            green_count += 1
first = red_count + blue_count + green_count
sec = blue_count + max(red_count, green_count)
print(first, sec)
#max()로 하면 당연히 문제가 원하는 값이 나오지 않는다는 걸 알고 있었지만
#dfs를 다른 방식으로 어떻게 사용해야할지 감이 안 잡혀서 답답한 마음에 제출한 
