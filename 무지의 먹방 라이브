Q. 회전판에 먹어야 할 N 개의 음식이 있다. 
각 음식에는 1부터 N 까지 번호가 붙어있으며, 각 음식을 섭취하는데 일정 시간이 소요된다. 
무지는 다음과 같은 방법으로 음식을 섭취한다.
무지는 1번 음식부터 먹기 시작하며, 회전판은 번호가 증가하는 순서대로 음식을 무지 앞으로 가져다 놓는다.
마지막 번호의 음식을 섭취한 후에는 회전판에 의해 다시 1번 음식이 무지 앞으로 온다.
무지는 음식 하나를 1초 동안 섭취한 후 남은 음식은 그대로 두고, 다음 음식을 섭취한다.
다음 음식이란, 아직 남은 음식 중 다음으로 섭취해야 할 가장 가까운 번호의 음식을 말한다.
회전판이 다음 음식을 무지 앞으로 가져오는데 걸리는 시간은 없다고 가정한다.
무지가 먹방을 시작한 지 K 초 후에 네트워크 장애로 인해 방송이 잠시 중단되었다.
무지는 네트워크 정상화 후 다시 방송을 이어갈 때, 몇 번 음식부터 섭취해야 하는지를 알고자 한다. 
각 음식을 모두 먹는데 필요한 시간이 담겨있는 배열 food_times, 네트워크 장애가 발생한 시간 K 초가 매개변수로 주어질 때 몇 번 음식부터 다시 섭취하면 되는지 return 하도록 solution 함수를 완성하라.

- 다른 사람의 풀이

효율성 문제 그리고 문제가 원하는 풀이 방식을 전개할 수가 없었다.
나는 for문을 돌려서 구현 문제처럼 풀려고 했으나, 제대로 문제를 이해하지 못한 탓에
효율적으로 음식을 먹는 시간을 계산하는 방식을 떠올리지 못했다.
결국 그래서 문제 풀이 방식을 봐버렸는데
그걸 봐도 이해가 안 됐다.
한 1시간 보니까 이해가 되었다.

이 풀이는 4번 재풀이 후에 올리는 정리이다.

idea: for문으로 돌리면 먼저 먹어버린 음식인 요소 0을 처리해주기 힘드므로
가장 적은 시간이 걸리는 음식부터 먹어치우기로 한다.
이때 이 계산을 하기 전, 음식을 모두 먹는 데에 걸리는 시간보다 방송이 정지되는 시간이 더 나중이라면
이미 음식은 없는 이후이므로 -1을 반환한다.

우선 핵심 계산 방법은 아래와 같다.
한 가지 음식을 먹는 데 걸리는 시간 -> (현재 음식을 먹는 데 걸리는 시간 - 이전의 음식을 다 먹는 데 걸렸던 시간) * 해당 음식 포함 현재 남은 음식들의 개수
이 계산법을 필두로 while문을 돌리면서 음식을 먹는 데 걸리는 시간이 k의 시간보다 커지면 반복문을 벗어난다.

남아있는 시간과 남아있는 음식을 가지고 k초 후에 먹어야 하는 음식의 인덱스를 출력한다.

import heapq

def solution(food_times, k):
    if sum(food_times) <= k:
      return -1
    else:
      q = []
      sum_val = 0
      previous = 0
      length = len(food_times)

      for i in range(len(food_times)):
          heapq.heappush(q, (food_times[i], i + 1))

      while sum_val + ((q[0][0] - previous) * length) <= k:
          curr = heapq.heappop(q)[0]
          sum_val += (curr - previous) * length
          length -= 1
          previous = curr

      q.sort(key=lambda x : x[1])
      answer = q[(k - sum_val) % length][1]

      return answer
