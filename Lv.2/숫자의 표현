Q. 1 + 2 + 3 + 4 + 5 = 15
4 + 5 + 6 = 15
7 + 8 = 15
15 = 15
자연수 n이 매개변수로 주어질 때, 연속된 자연수들로 n을 표현하는 방법의 수를 return하는 solution를 완성해주세요.

- 다른 사람의 풀이(효율성 문제에 봉착하여 다른 사람의 코드 반영, 수학적 풀이)

n이 되는 연속되는 숫자의 조합의 개수는 n의 홀수인 약수의 개수와 같다고 한다.
왜 그렇게 되는지 이유는 모르겠지만, 확실히 효율성 문제를 잡을 수 있었다.

def solution(n):
    cnt = 0

    for i in range(1, n + 1):
        if n % i == 0:
            if i % 2 != 0:
                cnt += 1
                
    return cnt
    

- 나의 풀이(원래의 풀이를 바탕으로 개선)

def solution(n):
    cnt = 0

    for i in range(1, n + 1):
        ans = 0
        for j in range(i, n + 1):
            ans += j
            if ans == n:
                cnt += 1
            #핵심 break문의 조건
            elif ans > n:
                break
                
    return cnt
    

- 나의 풀이(초안)

arr = [i + 1 for i in range(n)]
cnt = 0

for i in range(n + 1 // 2):
    ans = 0
    for j in range(i, n):
        ans += arr[j]
        if ans == n:
            cnt += 1
            break
    
print(cnt)


*핵심*
시간 절약을 위해서는 break문이 들어갈 공간이 숫자들의 합과 n이 같을 때가 아니라, 숫자들의 합이 n보다 커질 때마다 무조건 break를 하는 것이다.
나는 시간을 절약하기 위해서 n을 나누기 2하여 절반만 돌리고 숫자들의 합과 n이 같을 때 break를 걸었다.
n을 나누기 2하여 절반의 수치까지만 for문을 돌리는 것은 괜찮은 시도였으나 그렇게 큰 긍정적 영향은 주지 못했다.
그 이유는 사실 누가봐도 숫자들의 합이 n보다 커지는 경우가 너무나도 많기 때문이다.
그 과정이 시간을 많이 잡아먹는다. 그래서 숫자들의 합이 n보다 커질 때면 무조건 break를 해주는 게 시간적인 효율에 도움을 준다.
