Q. 두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 
예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. 
n개의 숫자를 담은 배열 arr이 입력되었을 때 이 수들의 최소공배수를 반환하는 함수, solution을 완성해 주세요.

# 요약한 문제: n개의 수들의 배수 중 공통이 되는 가장 작은 수를 구하라
# idea

# 1. arr의 원소들이 약수가 되는 숫자 중 가장 작은 수를 반환
# 2. 가장 큰 원소를 n = 1부터 n += 1해가면서 곱한다.
# 3. 그러다가 원소 * n이 arr을 약수로 가지는 수라면 그 수를 반환한다.
# 3-1. 3의 과정을 위해서는 for문으로 약수 체크를 해야한다.
# Condition
# 원소는 100이하

* idea no.2가 잘못됐다.
* num *= 1, 2, 3, 4 ... 가 아닌 (이렇게 하면, 2 * 2 = 4에다가 4 * 3을 하게 되는 꼴이다. 원했던 건 2 * 3인데 말이다.)
* num += num을 반복적으로 수행하여 구구단처럼 값을 더해나가야 한다.

- 나의 풀이

arr.sort()
maxNum = arr[-1]
n = maxNum

while True:
    check = True
    for i in range(len(arr) - 1):
        if maxNum % arr[i] != 0:
            check = False
    if check == True:
        break
    maxNum += n
print(maxNum)


간만에 다른 풀이를, 힌트를 보지 않고 푼 문제다.
아이디어는 금방 떠올랐다. 처음에 문제를 다 읽고 떠오른 아이디어가 정답의 아이디어였다.
하지만, 헤맸다.
idea no.2를 제대로 적지 못했던 것이 이유였다.
maxNum += n이 아닌, maxNum *= 2 그리고 maxNum *= n을 적어버린 탓에
while이 무한루프에 빠져버렸다.
그 상황에서 나는 뭐가 잘못됐는지 전혀 눈치채지 못했다.
